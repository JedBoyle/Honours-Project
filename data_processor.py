


import re
import random

# Weights from a random forest of 200 trees mtry = 5 and inputs unordered.
weights1 = [0.0037813963299895,0.00453537966729657,0.00547984266355995,0.00577618239133293,0.00574091091228884,0.00541267264146298,0.00540771229734257,0.00524096920321665,0.0053455548898104,0.00562373987963483,0.00586268023134048,0.00569128668765888,0.00584187991546711,0.00550976425270342,0.00628925638898491,0.00643541204620045,0.00634406126602654,0.00680128524299023,0.00682394438900327,0.0069334407203749,0.00808825878919715,0.00841589880673103,0.00813259334679372,0.0081192456623318,0.00806581139376066,0.00860139770824678,0.00816328860505539,0.00418742873434464,0.00663998995601344,0.00900529974055795,0.00891275418773033,0.00931579596595359,0.00927815750159607,0.00936409021045959,0.00886895287748104,0.00922051247019659,0.00939554992565565,0.00982678942104175,0.0105218732987235,0.0105594691636793,0.0096855959915534,0.0114519070178804,0.0108127527103159,0.0112852202171243,0.0147659933403828,0.0151906387113408,0.015719099330909,0.0191227739443914,0.0225165228874521,0.024997607342377,0.0270650479691187,0.023370268492546,0.0224090195474083,0.0240020547498655,0.00419096637018462,0.00818974298796706,0.0100368820328186,0.01154062080706,0.0105166091459385,0.0107011300820368,0.012490635034848,0.0107710317155169,0.0107054078887248,0.0109112443295786,0.0101091699056681,0.0099189779463452,0.00993061350886865,0.00968801789185531,0.0090086490120319,0.00945628322080372,0.0113803453085804,0.0108619222796584,0.0132749961217174,0.0106356835245653,0.0121168482134842,0.013702335727513,0.0152476667461544,0.0135742860162066,0.0151229504543719,0.0171242508218751,0.0157791105604194,0.00406893653280412,0.00561507830465168,0.00672341085344986,0.00700806423106569,0.00654049301512736,0.00657621743204033,0.00600848329436182,0.00571304802989978,0.00565798132582796,0.00582951046922475,0.00566625382046896,0.00541987738524299,0.00565944618101242,0.00533094033130259,0.00534621680643941,0.0054889871840254,0.00581348607737261,0.00587238315162554,0.00565504081663703,0.00568228814964275,0.00560900502577329,0.00590012911143425,0.00562204812123684,0.0052997395715782,0.00497759954651579,0.00499140024569429,0.0049825252958505]
# Weights from a random forest of 200 trees mtry = 25 and inputs unordered.
weights2 = [0.00432932245963301,0.0047399105678277,0.00561005350130176,0.00578130067004789,0.00555945792621511,0.00557341933021974,0.00547277240698268,0.00518730149694077,0.00494274686739205,0.00497528680376171,0.0052116788457437,0.00534814566822685,0.00522318993805725,0.00474317740485953,0.00557402487108069,0.00569133795199866,0.00539292727800844,0.0059097927227554,0.0057649206306153,0.00618599836886976,0.00681889310715075,0.00791511856249905,0.00724307161879929,0.00578579065447649,0.00549764589372748,0.00576172802363224,0.0059691844018235,0.00499947752525,0.00691296209739809,0.00895526113784488,0.0099714753297538,0.0100075061777042,0.00921590979163299,0.00906420024768565,0.00875966651171199,0.00849224989251091,0.00906185982977199,0.00894835813064555,0.0109100929637312,0.01054068034483,0.00958030651751459,0.00931524677380444,0.00948829668794987,0.0102820918347233,0.00991549126172148,0.0124946373750568,0.0169169468783266,0.0157061019016355,0.0215227667123502,0.0308223819508951,0.0277009729393467,0.0338363641478763,0.0366608294388204,0.0535494131974828,0.00463883664764458,0.00832883300287299,0.0122802741424375,0.0126654855688881,0.0122579015565759,0.0140040341243328,0.012308646439027,0.0117688703055595,0.0105926431155304,0.00999067994141988,0.0107141748930424,0.00920758318536713,0.00860860168215035,0.00817069173031105,0.00770935380917202,0.00817792797427566,0.00826650066705631,0.0100719197538128,0.00988451584633254,0.00876666135595982,0.00983318584375837,0.0113477670096221,0.0110718700468207,0.0129200272212942,0.0154842893154694,0.0221585157045493,0.0191896405157626,0.00462623684173478,0.00596211085336734,0.00693083257458801,0.0065583972683821,0.00625159058570846,0.00568810905407809,0.00527960996418293,0.00508407087233009,0.0047798046099505,0.00529818888721415,0.00500524570262258,0.00444906014477974,0.00476718953762722,0.00428447069742481,0.00451978639049939,0.00489727893511401,0.00449319903923171,0.00467624960308051,0.00460978097282156,0.00462209385292641,0.00463771159681286,0.00458598104491691,0.00461686453286682,0.00439395437727101,0.00462037716888471,0.00418980789060259,0.00391282003131314]
# Weights from a random forest of 200 trees mtry = 50 and inputs unordered.
weights3 = [0.00501038517601323,0.00482929300537193,0.00512562125359109,0.00622418438026483,0.00588765519003524,0.00527463990683498,0.00544634027159436,0.00506169223490849,0.004789997538124,0.00485856399800431,0.00504993859490951,0.00467760587483678,0.00501863722126188,0.00466328116455571,0.00555611118169111,0.00539545588887341,0.00533096787421731,0.00568763712145099,0.00572331005323298,0.00655244496242569,0.00667049051365018,0.00737779884542938,0.00642863167156222,0.00539518751049169,0.00515127060437345,0.00529100312338002,0.00500408771802595,0.00534752513498979,0.00692450908094753,0.0088190694868584,0.00992664498087075,0.0105598531929774,0.00920947318705713,0.00881155772169065,0.00827569564631444,0.0080554826311467,0.00897224773405858,0.00946507807778553,0.0110893339943918,0.0103884951551925,0.00923133624139368,0.00882729041143882,0.00906774715199219,0.0097779998433548,0.00993951649365248,0.0108948384306004,0.0113796207946729,0.0117266325040861,0.0162960816436064,0.0241758126124141,0.026412489323977,0.0274544967323935,0.0349748532106552,0.0971453839036051,0.00503684857638337,0.00928626581804761,0.012463840969846,0.0132498723434166,0.0124952359757098,0.0142556297332541,0.0126770359167641,0.0136012266823443,0.0100182753176131,0.0105047419740954,0.0102659987627832,0.00866119800259184,0.00828701613394761,0.00782598111338919,0.00740330671771242,0.00798423530630289,0.00831917991722829,0.00837551984255822,0.00762098967927896,0.00712528270529364,0.00693377293936858,0.00827554318018605,0.00769778772093968,0.00777747142768548,0.0146571839356733,0.022087716735736,0.0339592141288512,0.00510197579234803,0.00634091512755955,0.00727245763195136,0.00662073942997263,0.00558228613578252,0.00539773773794213,0.00486284469234275,0.00502556208934206,0.00480181624804688,0.00513877538838786,0.00462657676559102,0.00403458818924468,0.00477284442450207,0.00422871353654131,0.00430833723725512,0.00488404032120575,0.0043577737885899,0.00440695485052777,0.00454330564362733,0.00481775687453655,0.00458216215767515,0.00484278068222789,0.00499687979523546,0.00391125318792418,0.00484032833527654,0.00418579000310815,0.00403713417501991]
# Weights from a random forest of 200 trees mtry = 75 and inputs unordered.
weights4 = [0.00500431779153506,0.00495137939437003,0.00561606623860434,0.00607277750741909,0.00547702078675305,0.00512109966850912,0.00542295362327498,0.00492117412731603,0.00496773442932753,0.00501821514844066,0.00482845102633582,0.00475263378465973,0.00501743011791833,0.0043071284674635,0.00535360458567653,0.00545021940681223,0.00504360575741191,0.00592983308786285,0.00545756276264133,0.00645016400638578,0.00679369460480947,0.00783129207658918,0.00597488010731673,0.00513482479722731,0.00528097724685036,0.00485930079120139,0.0048048504713809,0.00547998983423767,0.00752599012949849,0.00846728765829158,0.0106911431188495,0.0102401611852167,0.00907136281073741,0.00909262907172924,0.00849762306507483,0.00817584906754235,0.00859129841661419,0.00938431450694907,0.0108752861073467,0.0109937446112357,0.00938165450214711,0.00904612821673198,0.00919449560913758,0.00916090977550135,0.0101968819605853,0.0110851020449335,0.0111655692511713,0.0114959621407271,0.0131383102970738,0.0203245876142826,0.024899859424692,0.0288337968853244,0.0355879494333895,0.105428403194495,0.00583112546088515,0.00941399206222348,0.0131151842297126,0.0131053985520396,0.0118300449155032,0.0161060626372231,0.0138445915564532,0.0119005175151862,0.00945087570189762,0.010252877493469,0.0105595025171485,0.00852408167380227,0.00808937211305035,0.00770117486389694,0.00719350519094565,0.00762065859700125,0.00823154112353345,0.00808547241190387,0.00790066236546967,0.00673245346078072,0.00669286767250544,0.00719045709084781,0.00652881383977759,0.00647886306232855,0.0104931628066327,0.0184214750467022,0.044865317900334,0.00531005590159181,0.00627353141956468,0.00726426695767843,0.0063006914149735,0.00574745321185348,0.00561202562242285,0.00497045773453412,0.00508078450362977,0.00457090223034479,0.00490910816382615,0.00457219205932186,0.00402974743746179,0.0045694680535424,0.00436458756974426,0.00446466128141742,0.00480787973872046,0.00421140852117114,0.00442182849402737,0.00459927929056451,0.00464044829369721,0.00449922956628698,0.00480853945106307,0.00465714431503071,0.00408456578698162,0.00512939812218759,0.00434924073552566,0.00372157051397289]
# Weights from a random forest of 200 trees mtry = 100 and inputs unordered.
weights5 = [0.00511266642579726,0.00539682741585891,0.00524190169897105,0.00632998547428933,0.00586595430196357,0.00526332451384085,0.00548602779192254,0.00517149167547145,0.00466219946260266,0.00476839028402878,0.00498994359689245,0.00467221958550148,0.0048883390571395,0.0044684596718646,0.00559305183062641,0.00546740228190223,0.00519528017293985,0.00610944995165965,0.00594300428277632,0.00587264123770041,0.00690240742007237,0.00818920653226497,0.00603883829616478,0.00489519921596272,0.00477445138814432,0.00472931711123026,0.00528565697001621,0.00574465319576837,0.00732604278965322,0.00873134822414956,0.0109553387760663,0.0106154521052401,0.00951025397253818,0.00894990262543761,0.0081165537105359,0.0075572266604875,0.00903939414846725,0.00918836286909762,0.0113049025721259,0.0102261353986967,0.00906193285325064,0.00948288393248552,0.00886920270238922,0.00892329176715923,0.00945111758794051,0.0106829377305868,0.0114028115011867,0.0112785878790518,0.01466844926729,0.0178019156160827,0.0150293551841723,0.0178925094540438,0.0132394576694817,0.150951482616202,0.00553242624983024,0.00910621139064285,0.0129838707804991,0.0128988974233556,0.0115757583661458,0.0155500377427028,0.0137698405964667,0.0132649663672526,0.00906907997097533,0.00958909485893586,0.0106904042520034,0.00776714951508842,0.00775392405657641,0.00800204959543508,0.00720154006388137,0.00746192139836758,0.00792559198516873,0.00811190744487938,0.00788148273016851,0.00647373942173882,0.00653155028742469,0.00666997352027799,0.00606970034827647,0.00581136186114198,0.00491595845739339,0.0181739361059018,0.0537236883831376,0.00593516038871937,0.00667100846282301,0.00740324262488101,0.00666926604158184,0.005731940838275,0.0053454447033041,0.00483931020806985,0.00454512008697009,0.00442169613071492,0.00484905734849208,0.00477893141668903,0.00415778391032157,0.00450822466958052,0.00447311708648675,0.00422677748207,0.00465004131026985,0.00432661806120996,0.00483654486014295,0.0039975639965982,0.00428046139716073,0.00449322740799853,0.0049650026217765,0.00478168957673573,0.00414101032741186,0.00499680052384428,0.00423619940243248,0.00391755548457932]

# Weights from a random forest of 200 trees mtry = 5 and inputs ordered.
weights6 = [0.00414111958036823,0.00338774769356535,0.0029675285134648,0.00285002194665653,0.00256224175300853,0.00251562683968383,0.00240961035460868,0.00276568629588924,0.00258551606264077,0.00247163561316962,0.0024657735939286,0.00259096178424687,0.00250885514728863,0.00264000219778994,0.00233446726041932,0.00252155394752684,0.00274474519759561,0.00276901275979293,0.00280974991950655,0.00292246532570971,0.00296457324655312,0.00260827070187076,0.00293482445389607,0.00285979364287968,0.00308568520483269,0.00302147305177331,0.00306829016684307,0.00338740901404803,0.00375081742530698,0.00389607965599223,0.00419977632909749,0.00379102529726357,0.00370579354295923,0.00417223116497895,0.00401501834186493,0.00435637927476874,0.00494874768498282,0.0047487166479693,0.00469758323128265,0.00481307048158533,0.00511086598277151,0.00552068762947386,0.00551234392386307,0.0054923882300703,0.00558501504661677,0.00610018344553018,0.00654673224569984,0.00589203914655638,0.00590927390712431,0.005826121656818,0.00686780082938692,0.00623408931221196,0.00633548430323554,0.00804893004077619,0.00733788106109396,0.00755074571457532,0.00683905075125413,0.00692131755774455,0.00882366859794471,0.00796388504371262,0.00834832646279468,0.00748172893727155,0.00772997985069363,0.00927287706692552,0.00823655637832009,0.00848111640038185,0.00871165993451103,0.00747101628124578,0.0106316648706171,0.011047236960951,0.00897661428782836,0.0102514530804134,0.00927565199947117,0.011281942370946,0.0121106305406346,0.0108102171036971,0.0117544268361671,0.0128294770325558,0.013361802098438,0.0139915111440942,0.0152612399780561,0.0126165232845101,0.0133622313897896,0.0204437421398793,0.0172626560380335,0.0217944962282627,0.0202024542697528,0.0170571418173014,0.0168426511783134,0.0165612628319975,0.017130151227631,0.0173687810451463,0.0262619392277158,0.0206075390761173,0.0201621515304157,0.0171575273784431,0.0252155774895429,0.0208973075172726,0.0170088675389708,0.0229412887150273,0.0186858967097589,0.0189789938443202,0.0241519988678613,0.0172843624726527,0.0174565345671755,0.0239968267705078,0.0205672748106211,0.0202583076428956]
# Weights from a random forest of 200 trees mtry = 25 and inputs ordered.
weights7 = [0.00500907575517601,0.00396534664693991,0.00314125471481469,0.0027870750099244,0.00282795961597674,0.00283753569148406,0.00234972696278674,0.00263705386395566,0.00257110455356252,0.00231997947909411,0.00234818519734165,0.00225407360943637,0.00219629765274366,0.00206163561895787,0.00228776264490724,0.00246658212109495,0.00243351200300577,0.00247532140170564,0.00251817117328217,0.0025934496240327,0.00255335210274233,0.0025391227491819,0.00246430528294476,0.00255345456198401,0.00281336343502096,0.0026516684138897,0.00281083090457418,0.00283345886957142,0.00314270438276775,0.00339170998886618,0.00312774542589149,0.00294512235499364,0.00293936049224737,0.00343204108196046,0.00348973626877327,0.00393910073982115,0.00418986862539812,0.00366080631952887,0.00376452988066136,0.00403588444543339,0.00440911751477116,0.00419486259163226,0.00433152529852435,0.00438916702633236,0.00490105509577158,0.00440102114038725,0.0046834592646319,0.00499345639862496,0.00488758993910058,0.00560705714431438,0.00515629857075774,0.00568666720503871,0.00544391030254517,0.00597505727457465,0.00588114935964055,0.00571668979708572,0.00591940224813456,0.00615862003900657,0.0065154792351419,0.0064318254865586,0.00622016600729423,0.00643924807148382,0.00723082280313616,0.00740261882921437,0.00651537304729264,0.00654259356471143,0.0063273282370524,0.00667990390748563,0.00638329234387796,0.00732497076627544,0.00730150964436994,0.00670870291142335,0.00682544556803109,0.00769273124895797,0.00770617114721723,0.00771434069863676,0.00787566434493081,0.00810330715027464,0.00845212544085923,0.00802918198617548,0.00858381788428845,0.00974696937748801,0.013917656798093,0.0158785754692672,0.0145934961658695,0.0348769548222537,0.0215120956214284,0.013471881521638,0.016780685638813,0.0148959390729991,0.0155956284486338,0.0238156670287318,0.0362259685780284,0.0327621242796822,0.0146032131741887,0.0318423775806126,0.0295487536370578,0.0284773627701034,0.0479262288274576,0.031452544328126,0.0232774899401859,0.0183634819854669,0.0195442208138856,0.0208482692900663,0.0196881232429568,0.0236423619131914,0.0250765034164476,0.0265334300552882]
# Weights from a random forest of 200 trees mtry = 50 and inputs ordered.
weights8 = [0.00618810737066378,0.00453010271035187,0.00322237677395712,0.00318430700652058,0.00319772954465742,0.00307008557098023,0.0024376616870105,0.00276379021868651,0.00268126974533858,0.00233163454284064,0.0022375062563734,0.00241026198970293,0.00230990359296626,0.0021770072616273,0.00252091256881514,0.0022462958339748,0.00237553849265389,0.00215876613497373,0.00225925209966642,0.00239922114624965,0.00253164469570603,0.00229793816274009,0.0022222197566442,0.00246615432739013,0.00262275795040372,0.00250369963560462,0.00272394462021591,0.00278207222837605,0.00290482642106089,0.00360054343179201,0.00307096752855775,0.00274766413412494,0.00287246490441147,0.00314798206445194,0.00340275916762004,0.00328259185194763,0.00386481751594677,0.0037018777524815,0.00380280284089701,0.0037537013230165,0.00397844184276127,0.0040443319525094,0.00391540948257718,0.00396735787773178,0.0045033803091947,0.00405743690752006,0.00437883355696557,0.00486010028815759,0.00457808702256647,0.00488582773246374,0.00475149326843173,0.00520842446564376,0.00538206951046363,0.00544586930583677,0.00546831947641239,0.0060522554875422,0.00558425406892427,0.00628415275339977,0.00645860907303507,0.00590976654694971,0.00571194076754299,0.00611976425903344,0.0063294934174006,0.00649654505567903,0.00598242223619437,0.00584325742868655,0.0057388859642298,0.00601229593965226,0.00629167829119428,0.00677172946560747,0.007743974218478,0.00597064838743581,0.00606015164992145,0.00634669654519947,0.00738439524295424,0.00762176086337806,0.00739661701746528,0.00787655936234454,0.00884625836753049,0.00798200678041609,0.0080966505422253,0.0088868262438273,0.0112395173464426,0.0114186126162759,0.0144633884928426,0.0384034150348493,0.0199900000979796,0.0128006004287291,0.0144860466067421,0.00989903812515672,0.016818875555381,0.0278095063437789,0.0497703689888352,0.0322825092069494,0.0145201088358439,0.0214161183664713,0.0355182330275561,0.0259813820568062,0.0647702704199984,0.0193892917692195,0.0233262952607928,0.018000416338637,0.0205651437744266,0.0231801541118869,0.0230320093184459,0.0258361478983931,0.0272425424816354,0.0296098676590406]
# Weights from a random forest of 200 trees mtry = 75 and inputs ordered.
weights9 = [0.00658334681165903,0.00462388842916962,0.00355211895413239,0.00326343823317634,0.0030813583209483,0.00310804511131795,0.00243240304048853,0.002684148378531,0.00263524085318997,0.00237581280768316,0.00258478249515462,0.00246304700367604,0.00229690102223957,0.00213240384588128,0.00209443259601872,0.00219928046739022,0.00212166062537405,0.00237761651035782,0.00223263722845352,0.0022900799000044,0.00253264776981811,0.00220741433512536,0.00222627627587326,0.00254553109963686,0.00261398059420499,0.00261812941326873,0.00271792935762217,0.00276160482902736,0.00290739920835875,0.00409149974611928,0.00299915065606402,0.00276217797797618,0.00278308441510787,0.00300623063887125,0.00312454494161052,0.00323242494792715,0.0040901857760525,0.00370922420545375,0.0035986655631972,0.00337853185563544,0.00370714457187075,0.00371692184159551,0.00365491190087626,0.00388934182462378,0.00483203121077683,0.00371713806171659,0.00407287532425618,0.00435570293740871,0.00441589779785585,0.00518638993433672,0.00440360576772834,0.00530228171885346,0.0046016602245455,0.00525265378230994,0.00555538705850122,0.00561925832340393,0.00553909890798226,0.00579470384074327,0.00615143350715849,0.00607556164044902,0.00592744809142586,0.0059678230988845,0.00650874715271277,0.00617640639213105,0.00577999968365981,0.00572399023205077,0.00552399578505727,0.00585380786866786,0.00623923942760178,0.00695612054259394,0.00805982417572695,0.00553536145885463,0.00572884666034971,0.00630096408094252,0.0069291110422034,0.00730648606439527,0.00732573369805587,0.00759228420445826,0.00816567062105833,0.0072285812158594,0.00824220930191836,0.00927259429772013,0.0104357412638712,0.0144896347798027,0.0151051222850326,0.0447567623379697,0.0182504619155184,0.0171600419672833,0.0118895646784912,0.0095530634783665,0.0132389820871168,0.0209512717787714,0.0502191465895886,0.0353069209098214,0.0124791549453289,0.0212201953091782,0.0396481666219156,0.0327227409082056,0.0490600383008624,0.0194486814631367,0.0265944583587626,0.0180972333276797,0.0218606253664759,0.0259469458866387,0.0225405667371177,0.0273999131205414,0.0281547343171776,0.0322413097502269]
# Weights from a random forest of 200 trees mtry = 100 and inputs ordered.
weights10 = [0.00687399372698849,0.00509259344145244,0.00393311291824096,0.00334556363912257,0.00326245023788386,0.00346180421584145,0.0024218436436581,0.00286920561990507,0.00259451861856234,0.00222919612579029,0.00250821975450394,0.002415117127665,0.00244113509829913,0.00219991484622818,0.00218741562443161,0.0020497625232875,0.00231287504144823,0.00227544430667732,0.00237223670466439,0.00243998513712877,0.00270983523551895,0.00199533229476108,0.00222851241902561,0.00250974775193471,0.00264121601214055,0.00243494423749575,0.00268728385525052,0.00269685220783186,0.00264261375892003,0.00397506786029627,0.00293424063175482,0.00261446124797762,0.00293179057037165,0.00275538198965565,0.00316024421210486,0.00336875278853017,0.00404179278903401,0.00353170334415428,0.00360503676702677,0.00382572689157684,0.00348119919852932,0.00349682005152057,0.00361597234028718,0.0037409260992931,0.00427518605945474,0.00388284179800108,0.00419196100634432,0.00407540266648005,0.00424000303411185,0.00490648262359964,0.00464596548804112,0.00524453850827939,0.00463317103613716,0.00552762879244032,0.00509099160344434,0.00578124122016536,0.00535444430653592,0.0057951743028839,0.00634550047401247,0.006035984230995,0.00564716098960846,0.00587527504590317,0.00600803458663276,0.00526448741625869,0.00549815499546836,0.0053838383565537,0.00529301025622347,0.00543862385342417,0.00600740602763529,0.00670484612185814,0.00828371919061002,0.00570392035788765,0.00581082955994626,0.00587306479661921,0.00753193196161319,0.00690297875527308,0.00743173416761373,0.00710749012254214,0.00911490929346331,0.00725871441200687,0.00765420209712499,0.00862960504266951,0.0135659448974814,0.0150451305915602,0.0107384707986019,0.037717380741602,0.0159407265952361,0.012080257614658,0.0105912328938947,0.00962360056647525,0.0119939673771293,0.0169190555355527,0.0641858996059398,0.034791625131914,0.0133128454994164,0.0259476451554772,0.029196298529863,0.0261172685888365,0.0713372152231198,0.0258006732964467,0.0202062924735681,0.017919444088706,0.020087225809074,0.0277836284749425,0.0227062337129903,0.0270503169153773,0.0284760440186495,0.0335032783988526]

# Weights from a random forest of 200 trees mtry = 5 and inputs ordered by column.
weights11 = [0.00356805436622569,0.00448034143539012,0.00496117289289901,0.00514471517386638,0.00513208949379688,0.0045987723409697,0.00472411314714021,0.00459610217664553,0.00434934316725102,0.00447887324229807,0.0045289392813611,0.00448789682427683,0.00467041558520307,0.00454647705512469,0.0045382298841477,0.0047950246158975,0.00446798273010286,0.00482834756504397,0.00484493720803749,0.00508353787574218,0.00491481879330061,0.00512958999098273,0.00567204679216796,0.00503043094659858,0.00476368185316026,0.00491983532463953,0.00421430704825813,0.00422000602082373,0.0051795304321827,0.00678412384947457,0.00713103290302071,0.00633306797416996,0.00631233225897587,0.00627356756149326,0.00612353302695149,0.00620528862739425,0.00596882924904711,0.00666622516741792,0.00676005655244474,0.00715942636769176,0.00637580000678081,0.00711826982877981,0.00715343732502596,0.00795282053536323,0.00705527899710377,0.00687966830950674,0.00695854197013058,0.00739950723208613,0.00755459292801387,0.00802352675514997,0.00870914178957634,0.00934099636621481,0.00683496838385532,0.00650895420599512,0.00407388834538335,0.00672610938849834,0.00908762465727375,0.00916867181014395,0.00841175768913887,0.00941279128501706,0.00871489875580823,0.00886232354006492,0.0102226787496538,0.00958081987795083,0.00984511035640471,0.0097397003675226,0.00903522246109402,0.00992397409605938,0.00941380268874862,0.00856958601269453,0.00996944559319509,0.00974657340241577,0.0106325657651958,0.010395242315839,0.0131246030400194,0.0136508637559561,0.0134792981736091,0.012623967038243,0.0156242686978402,0.0173333059452612,0.0171362981613997,0.00389968698162708,0.00818986482197278,0.0109973917946323,0.0118581319274865,0.0111179165526338,0.0113144946385183,0.011427048670088,0.0118429773065029,0.010617374090072,0.0120330442932423,0.0116760157903264,0.012633124165426,0.011641875133463,0.0151075842315322,0.0112182079361398,0.015186991873045,0.0152721971946487,0.0142091250965173,0.0172293326701277,0.0172552194481017,0.0172982666198405,0.0201931916375383,0.0260039105694674,0.0189945355387638,0.0249030693905812,0.0220290019868783,0.0288924262351972]
# Weights from a random forest of 200 trees mtry = 25 and inputs ordered by column.
weights12 = [0.00394496809739373,0.00462586965511759,0.00483015579960648,0.00445620642661936,0.00469579602413253,0.00398380009023446,0.00463532801721596,0.0044063254413565,0.00401000236054882,0.00432712011228777,0.00445695020951893,0.00417336092845896,0.00459337510408308,0.00415802895150412,0.00435332451178158,0.00440062722644146,0.00484155192920575,0.0045903315256978,0.0041100426750116,0.00482583445808679,0.00428122692090159,0.00451477860158063,0.0053591962398161,0.00440949791210303,0.00459871157365989,0.00423175745441181,0.00430243057252628,0.00482409716764039,0.00513682637775633,0.00597053222441683,0.00636682109150228,0.00563278249216887,0.00598764238823632,0.00569810293066217,0.0052596912406906,0.00521616108094422,0.00552445493844491,0.00598773789026096,0.00560354872699015,0.00599185173613852,0.00532204160384459,0.00608053963540891,0.00613646570099557,0.00626099919362953,0.00622177039873607,0.00570351049931918,0.00616244001558117,0.00651585887023037,0.0069454672684676,0.0065298004991271,0.00572568160103067,0.00517494763696773,0.00504056023739393,0.00494845752410281,0.00479144569567324,0.00709936463037329,0.00871958107964893,0.00883076809228047,0.00798521547215806,0.00821960590648882,0.00808555141253258,0.00857944608581305,0.00890401699310904,0.00829989780478398,0.00810967717561881,0.00768409400409387,0.00782959770284164,0.00722450613728524,0.00741259954218894,0.00747706649766217,0.00800186314619922,0.00808944166615157,0.0086373001259998,0.008197828240462,0.00840867870119026,0.00914560571362661,0.00976417549488699,0.00887534542658932,0.0117297616310592,0.0165672417782662,0.0211199985009615,0.00429400493639731,0.00835209323303192,0.0116459741614579,0.013031897738168,0.0151272273833258,0.0129929022798175,0.0144956158562504,0.012137685839343,0.0122172112848028,0.0130109413308574,0.011878830513121,0.012188784201733,0.0122732265210369,0.0126128416480228,0.0107210176177144,0.0114408406359496,0.0115343809778583,0.0118689131977095,0.0124346421982983,0.0190978116917301,0.0226721633972976,0.0212693439686937,0.0210512751134452,0.0302804391126266,0.037659430367693,0.0422026253253768,0.0616328150203061]
# Weights from a random forest of 200 trees mtry = 50 and inputs ordered by column.
weights13 = [0.00402504474632232,0.00515451408220052,0.00472580727642943,0.00478811306124804,0.00476260569140873,0.00444310213702695,0.00469015968575436,0.00421675908359011,0.00420085008910609,0.00445634561061585,0.00454809243109131,0.0038387681756152,0.0047815610848809,0.00471392814059652,0.00440153611517342,0.0043757801677079,0.00491866793180155,0.00439510095626569,0.00457018158250112,0.00449164152587204,0.00422278182597125,0.00483051774304617,0.00512804960170124,0.00459682854133245,0.00501172725745977,0.00467880501842852,0.00425717796495113,0.00536385259159819,0.00520417694331773,0.00588363082201321,0.00642971817833849,0.0051027633384136,0.0062912588514018,0.00549424654503056,0.00534614766856968,0.00484292707733076,0.00546737393533129,0.00541118029249327,0.00551773867154095,0.00542762053638972,0.00535329700273987,0.0055418272854195,0.00654638380324209,0.00618069540255115,0.00577437895104554,0.00582439817689094,0.00646087028673062,0.00741230631500043,0.00645717506433786,0.00558438573228159,0.00465234544440427,0.00480734673566711,0.00490301720175747,0.00465229449097723,0.00483899761731875,0.00714537856854287,0.0088053853473593,0.00866967613379791,0.00772612384927821,0.00817582729826135,0.00766072353339177,0.00857377874162588,0.00922333254343137,0.00820981119865821,0.00694740120118752,0.00683902789255027,0.00808792601744877,0.00696512793742635,0.00671116369365716,0.00655744055869321,0.00719803103796741,0.0079462620070796,0.00857922950801072,0.00765770087656915,0.00806861121425167,0.00803261901952468,0.00843464098283482,0.00761003172555947,0.00925156621417303,0.0125481541642934,0.0269552815870676,0.00452825564037823,0.00855221784421554,0.0120624231612997,0.0140759259313461,0.0140571171768745,0.0142415317943055,0.0150239674576076,0.0118649116085832,0.00989572894072055,0.0128145975734516,0.0115883760771162,0.0128327366485613,0.0128111788184573,0.0112588402202402,0.0109619608162978,0.0107741652468903,0.011122921733941,0.0109499756446171,0.0117405515779397,0.0134082475209495,0.0104673225838696,0.0145349301856748,0.0117579275196091,0.0230692810216745,0.0297477593820547,0.0601299986839621,0.107150093846488]
# Weights from a random forest of 200 trees mtry = 75 and inputs ordered by column.
weights14 = [0.00461745869854985,0.00518448691764067,0.00500142294465747,0.00485088075453596,0.00457289062494561,0.00401697046814664,0.00494866380612252,0.00449281860742622,0.00412148706841296,0.00423595795408071,0.00479220080261348,0.00410480141900209,0.00485711606200149,0.00413570280532451,0.00466549056542309,0.00467689384443083,0.0047919166961147,0.0047448923251034,0.00453289385555757,0.00486111943909982,0.00409066723456712,0.00464551812805809,0.00545811294823587,0.00418485946179127,0.00495979656239507,0.00448330090996295,0.0040718819111305,0.00540331077645631,0.00574265986498242,0.00564023033259067,0.00608076429520204,0.00531469531889095,0.00614226413946719,0.0048406149980932,0.0052577856202218,0.0049735903439459,0.00511035626846508,0.00564641266096262,0.00573666373061265,0.00491334882342549,0.00502423269593163,0.00592716900769526,0.00685281795772804,0.00577922775183515,0.00566197085130381,0.00561189848200953,0.0061675889250409,0.00728862017687401,0.00679317419697211,0.00529490920882647,0.00447396949610833,0.00485468777067625,0.0048993905746665,0.00471211888871104,0.00531656453000251,0.0073395946619308,0.00840832122368258,0.00822321447214327,0.00790609571468254,0.00805142145085853,0.00781674289884782,0.00915866503103663,0.00917694488021446,0.00809254216349339,0.00753084376805107,0.00692201330422753,0.00713364049950869,0.00633096364854165,0.00640733977281892,0.00718393559387815,0.00748092997380538,0.00779642843258844,0.00787656556184761,0.00686388858379231,0.00726458205254984,0.00818976112576087,0.00809243977503979,0.00672942444586832,0.00732375598642105,0.012253677148686,0.0336954681676659,0.00453151777921295,0.00867220184976012,0.0125748409298385,0.013989957712006,0.0146408511079381,0.0139138904686171,0.0146323682298319,0.0123861272370894,0.00891031842660775,0.0125673590015059,0.011702353303193,0.0125322759815901,0.0125489644977238,0.0118782833413031,0.0104409795879265,0.0106667249708517,0.0113301957567844,0.0100877897975086,0.0105261961912173,0.0131001563454292,0.010780776963142,0.0104015860067944,0.00983458371341589,0.00887169896935101,0.0196188395547343,0.0415925438320989,0.158456177603558]
# Weights from a random forest of 200 trees mtry = 100 and inputs ordered by column.
weights15 = [0.00452475972902258,0.00523904261359089,0.00467966824537251,0.00460950975275227,0.00481454947603152,0.0045992936957094,0.00490592929357897,0.00465339472063575,0.00410139037692283,0.00466521181036764,0.00449601365580012,0.00452381332143383,0.00475487904394035,0.00429244921095591,0.00450402356996196,0.00447042059946291,0.00499942602290574,0.00480361722211204,0.004625534388,0.00494428647352857,0.00387993574775403,0.0046597128282782,0.0054380726094845,0.00439000513896932,0.00493816484849042,0.0049204823411877,0.00416790196693383,0.00589851803975426,0.00561001638928006,0.00584703956948189,0.00679162938503677,0.00502891248721516,0.00612326201502845,0.00498247128487886,0.00526026192217197,0.00493646876393728,0.00553818807406483,0.00510333225984753,0.00567828752875804,0.00458158185123426,0.00523376853030923,0.00581207250126649,0.00659233227002879,0.00606098213430773,0.00553685968287652,0.00581300028762938,0.00644609675496355,0.0069982962303006,0.00653852374485351,0.00526197271939303,0.00458496126969085,0.00474605349345196,0.00479666181264693,0.00447393783370873,0.0054238611284684,0.00749213057142137,0.00896053977255323,0.00781691579931625,0.00755261775783493,0.00804078455353783,0.00775198858095151,0.00857906466035489,0.0094434452683643,0.00842441934470473,0.00748003350844084,0.00666223370458652,0.00749974566208365,0.00678193744564319,0.00645622427335095,0.00720410778258334,0.00720692813679764,0.00778329131389285,0.00768197722124111,0.006666705902694,0.0068754099714143,0.00792764946783731,0.00825113069112281,0.00644003833844137,0.0057510443861241,0.00757089613974996,0.0386001154321299,0.00488221942650334,0.00890625718919761,0.0128858958540043,0.0139829403890957,0.0147102697125827,0.0140176982370858,0.0136304168534835,0.0117530238783008,0.00930885950549438,0.0137951195899906,0.0118999574107423,0.0121203017750157,0.0124066001465105,0.0111342644674348,0.0102408478256219,0.0105030671555397,0.0111097570853569,0.010471867081399,0.0101683138214755,0.0131408672996281,0.00996513902550674,0.0108464640426899,0.0105395757396802,0.00859464804492959,0.00834215749935432,0.0243050234220735,0.188136233166361]
make_the_colour_return = []

class DataProcessor:


    def __init__ (self, file_name):
        # Read file into an array.
        self.data_array = []
        self.pos = 0 # Used to keep track of out position in the file.
        for line in open(file_name, 'r'):
            self.data_array +=  [line.rstrip()]

    # Read the file and convert the next particle into a particle object.
    def next_particle(self):
        # Find the position in the file where the next particle begins.
        while True:
            line = self.data_array[self.pos]
            if line == 'ELECTRON' or line == 'PION':
                particle = Particle(line)
                tracklet = []
                self.pos += 1
                break
            self.pos += 1
        # Read each line of the file.
        while True:
            line = self.data_array[self.pos]
            if '|' in line:
                # Remove pad information
                line = re.sub(r'\d*:\d*:\d*','',line)
                # Replace white spaces with ','
                line = re.sub(' +',',',line)
                # Remove trailing sum, split into an list, convert to int and add it to the list of tracklets.
                tracklet += [map(int, line[1:line.rfind('|')-1].split(','))]
            elif '-' in line:
                # We've found the begining of new tracklet.
                particle.add_tracklet(tracklet)
                tracklet = []
            else:
                return particle
                break
            self.pos += 1


    # Return True if there are no more particle to be read from the file.
    def is_empty(self):
        for i in range(self.pos, len(self.data_array)):
            line = self.data_array[i]
            if line == 'ELECTRON' or line == 'PION':
                return False
        return True

    # Count the occurance of the particle type in the file ('ELECTRON' or 'PION')
    def count(self, particle_type):
        count = 0
        for line in self.data_array:
            if line == particle_type.upper():
                count += 1
        return count



class Particle:


    def __init__ (self, particle_type):
        self.particle_type = particle_type
        self.tracklets = []
        if particle_type == "ELECTRON":
            self.particle_id = 1
        else:
            self.particle_id = 0

    def add_tracklet(self, tracklet):
        self.tracklets += [tracklet]

    def __str__ (self):
        to_return = self.particle_type + '\n'
        for tracklet in self.tracklets:
            for column in tracklet:
                to_return += str(column) + '\n'
            to_return += '\n'
        return to_return


    # Add the total of the ADC values for each tracklet of the particle.
    def summation(self):
        tracklet_totals =[]
        for tracklet in self.tracklets:
            total = 0
            for column in tracklet:
                for value in column:
                    total+=value
            tracklet_totals += [total]
        mean = sum(tracklet_totals) / len(tracklet_totals)
        while(len(tracklet_totals)!= 6):
            tracklet_totals += [mean]
        to_return = ''
        for total in tracklet_totals:
            to_return  += str(total) + ' '
        return to_return + str(self.particle_id)

    # Add the total of the ADC values for each tracklet of the particle.
    def smeared_summation(self, smear_factor):
        tracklet_totals =[]
        for tracklet in self.tracklets:
            total = 0
            for column in tracklet:
                for value in column:
                    total+=value
            tracklet_totals += [total]
        mean = sum(tracklet_totals) / len(tracklet_totals)
        while(len(tracklet_totals)!= 6):
            tracklet_totals += [mean]
        to_return = ''
        for total in tracklet_totals:
            smear_direction = round(random.uniform(0,1))
            if smear_direction == 0:
                smear_direction = -1
            #print smear_direction
            to_return  += str(total * (1 + smear_factor * smear_direction)) + ' '
        return to_return + str(self.particle_id)

    def weighted_summation(self, weights):
        to_return = ''
        tracklet_totals = []
        for tracklet in self.tracklets:
            tracklet_ADC_values = []
            for column in tracklet:
                for value in column:
                    tracklet_ADC_values += [value]
            total = 0
            for i in range(0, len(tracklet_ADC_values)):
                #print tracklet_ADC_values[i]
                #print weights[i]
                #if weights[i] <= 0.009:
                #    weights[i] = 0
                if weights[i] < 0:
                    weights[i] = 0
                total += tracklet_ADC_values[i] * weights[i] * 100000
            tracklet_totals += [total]

        mean = sum(tracklet_totals) / len(tracklet_totals)
        while(len(tracklet_totals)!= 6):
            tracklet_totals += [mean]
        to_return = ''
        for total in tracklet_totals:
            to_return  += str(total) + ' '
        return to_return + str(self.particle_id)

    # Returns, for each tracklet, a list of
    # ADC values in the original order.
    # Returned as a string.
    def ADC_values(self):
        to_return = ''
        for tracklet in self.tracklets:
            for column in tracklet:
                for value in column:
                    to_return += str(value) + ' '
            to_return += str(self.particle_id) + '\n'
        return to_return

    # Return a list conatianing the average of ADC
    # values across columns for each time bin.
    # Returned as a string.
    def avg_time_bins (self):
        time_bins = [0] * 27
        to_return = ''
        for tracklet in self.tracklets:
            for column in tracklet:
                for i in range(0, len(column)):
                    time_bins[i] += column[i]
        # Average the totals calulated above.
        # This needs to be done because some
        # particles have less than 6 tracklets.
        for time_bin in time_bins:
            time_bin = time_bin / len(self.tracklets)
            to_return += str(time_bin) + ' '
        return to_return + str(self.particle_id)


    # Return True if any of the ADC values are too big.
    def too_big(self):
        for tracklet in self.tracklets:
            for column in tracklet:
                for value in column:
                    # The values are meant to only be 10-bits.
                    # Values which have reached the boundary are probably wrong.
                    if value >= 1023:
                        return True
        return False

    def func(self):
        to_return = ''
        overall_total = [0] * 8
        for tracklet in self.tracklets:
            totals = [0] * 8
            for column in tracklet:
                totals[0] += sum(column[0:4])
                totals[1] += sum(column[4:8])
                totals[2] += sum(column[8:12])
                totals[3] += sum(column[12:16])
                totals[4] += sum(column[16:19])
                totals[5] += sum(column[19:22])
                totals[6] += sum(column[22:25])
                totals[7] += sum(column[25:28])
            for i in range(0,8):
                overall_total[i] += totals[i]
            for i in range(0,8):
                to_return += str(totals[i]) + ' '
            to_return += str(self.particle_id) + '\n'
        for i in range(0,8):
            overall_total[i] /= len(self.tracklets)
        for i in range(0, 6 - len(self.tracklets)):
            for i in range(0,8):
                to_return += str(overall_total[i]) + ' '
            to_return += str(self.particle_id) +'\n'
        return to_return

def reduce (file_name, max_size = 255.0):
        f = open(file_name, 'r')
        # Get the maximum and minimum value in the file.
        max_value = 0
        min_value = 1000000
        for line in f:
            for value in line.split(' '):
                if (not '\n' in value) and float(value) > max_value:
                    max_value = round(float(value))
                elif (not '\n' in value) and float(value) < min_value:
                    min_value = round(float(value))
        #print max_value
        #print min_value
        f = open(file_name, 'r')

        factor = max_size / max_value
        #print factor
        for line in f:
            to_print = ''
            for value in line.split(' '):
                if '\n' in value:
                    to_print += value.strip()
                else:

                    to_print += str(int(round(float(value) * factor))) + ' '
            print to_print


def remove_electrons(data_processor):
    num_pions = data_processor.count("PION")
    #print num_pions
    num_electron = round(num_pions / 10)
    while (not data_p.is_empty()):
        particle = data_p.next_particle()
        if particle.too_big():
            continue
        if num_electron >= 0 and particle.particle_id == 1:
            num_electron -= 1
            print particle.summation()
        elif particle.particle_id == 0:
            print particle.summation()




if __name__ == "__main__":

    #reduce("smear40summation.csv")

    data_p = DataProcessor('BaseData.txt')
    #print data_p.count('PION')
    #remove_electrons(data_p)
    count = 0
    while (not data_p.is_empty()):
        particle = data_p.next_particle()

        if particle.too_big():
            continue
        #print particle.func()
        if particle.particle_id == 1:
            count += 1
    #    print particle.smeared_summation(0.2)
        #print particle.ordered_column_weighted_summation(weights12)
        #print particle.ordered_column_weighted_summation(weights13)
        #print particle.ordered_column_weighted_summation(weights14)
    #    print particle.smeared_summation(0.01)

        #break


    print count

"""
def ordered_weighted_summation(self, weights):
    to_return = ''
    tracklet_totals = []
    for tracklet in self.tracklets:
        tracklet_ADC_values = []
        for column in tracklet:
            for value in column:
                tracklet_ADC_values += [value]
        tracklet_ADC_values.sort()
        #print tracklet_ADC_values
        total = 0
        for i in range(0, len(tracklet_ADC_values)):
            total += tracklet_ADC_values[i] * weights[i] * 100000
        tracklet_totals += [total]

    mean = sum(tracklet_totals) / len(tracklet_totals)
    while(len(tracklet_totals)!= 6):
        tracklet_totals += [mean]
    to_return = ''
    for total in tracklet_totals:
        to_return  += str(total) + ' '
    return to_return + str(self.particle_id)

def ordered_column_weighted_summation(self, weights):
    to_return = ''
    tracklet_totals = []
    for tracklet in self.tracklets:
        # Calculate the total of ADC values for each track.
        column_totals = []
        for column in tracklet:
            total = 0
            for value in column:
                total += value
            column_totals += [total]
        # Add a label to remeber which track the total belongs to.
        for i in range(0, len(column_totals)):
            column_totals[i] = (i, column_totals[i])
        # Sort the columns with respect to total ADC values of each column.
        column_totals = sorted(column_totals, key = lambda summation: summation[1])
        # Iterate over the columns in sorted order.
        # Keep the total of the sorted values multiplied by the weights.
        weighted_sum = 0
        weight_pos = -1
        for column in column_totals:
            for value in tracklet[column[0]]:
                weight_pos += 1
                weighted_sum += value * weights[weight_pos] * 100000
        tracklet_totals += [weighted_sum]
    # Add values for missing tracklets and format the output string.
    mean = sum(tracklet_totals) / len(tracklet_totals)
    while(len(tracklet_totals) != 6):
        tracklet_totals += [mean]
    to_return = ''
    for total in tracklet_totals:
        to_return  += str(total) + ' '
    return to_return + str(self.particle_id)


    return to_return + str(self.particle_id) + '\n'


# Order the columns of each track with respect to
# the total value of ADC values in the column.
# For each column leave the ADC values unordered but
# return the columns in order of total ADC values
# per column.
# Returned as string.
def ordered_column_ADC_values(self):
    to_return = ''
    for tracklet in self.tracklets:
        # Calculate the total of ADC values for each track.
        column_totals = []
        for column in tracklet:
            total = 0
            for value in column:
                total += value
            column_totals += [total]
        # Add a label to remeber which track the total belongs to.
        for i in range(0, len(column_totals)):
            column_totals[i] = (i, column_totals[i])
        # Sort the columns with respect to total ADC values of each column.
        column_totals = sorted(column_totals, key = lambda summation: summation[1])
        # Iterate over the columns in sorted order.
        for column in column_totals:
            for value in tracklet[column[0]]:
                to_return += str(value) + ' '
        to_return += str(self.particle_id) + '\n'


    return to_return

# Return an ordered list of ADC values for each tracklet.
# Returned as a string.
def ordered_ADC_values(self):
    to_return = ''
    for tracklet in self.tracklets:
        ADC_values = []

        for column in tracklet:
            for value in column:
                ADC_values += [value]
        ADC_values.sort()
        for i in range(0, len(ADC_values)):
            to_return += str(ADC_values[i]) + ' '
        to_return += str(self.particle_id) + '\n'
    return to_return
"""
